%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\2020\HACKATON\trajeto_campus_FGA.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/09/25 14:41:06

%% Initialize variables.
filename = 'D:\Downloads\trajeto_campus_FGA.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%f%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
trajetocampusFGAY = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\2020\HACKATON\trajeto_campus_FGA.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/09/25 13:50:18

%% Initialize variables.
filename = 'D:\Downloads\trajeto_campus_FGA.csv';
delimiter = ',';
startRow = 2;

%% Read columns of data as text:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%*q%*q%q%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric text to numbers.
% Replace non-numeric text with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = mat2cell(dataArray{col}, ones(length(dataArray{col}), 1));
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

% Converts text in the input cell array to numbers. Replaced non-numeric
% text with NaN.
rawData = dataArray{1};
for row=1:size(rawData, 1)
    % Create a regular expression to detect and remove non-numeric prefixes and
    % suffixes.
    regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
    try
        result = regexp(rawData(row), regexstr, 'names');
        numbers = result.numbers;
        
        % Detected commas in non-thousand locations.
        invalidThousandsSeparator = false;
        if numbers.contains(',')
            thousandsRegExp = '^[-/+]*\d+?(\,\d{3})*\.{0,1}\d*$';
            if isempty(regexp(numbers, thousandsRegExp, 'once'))
                numbers = NaN;
                invalidThousandsSeparator = true;
            end
        end
        % Convert numeric text to numbers.
        if ~invalidThousandsSeparator
            numbers = textscan(char(strrep(numbers, ',', '')), '%f');
            numericData(row, 1) = numbers{1};
            raw{row, 1} = numbers{1};
        end
    catch
        raw{row, 1} = rawData{row};
    end
end


%% Create output variable
trajetocampusFGAt = cell2mat(raw);
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\2020\HACKATON\trajeto_campus_FGA.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/09/25 13:53:15

%% Initialize variables.
filename = 'D:\Downloads\trajeto_campus_FGA.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column3: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%*q%*q%f%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
trajetocampusFGAZ = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    E:\2020\HACKATON\trajeto_campus_FGA.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2020/09/25 13:47:44

%% Initialize variables.
filename = 'D:\Downloads\trajeto_campus_FGA.csv';
delimiter = ',';
startRow = 2;

%% Format for each line of text:
%   column1: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%*s%*s%*s%*s%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'TextType', 'string', 'HeaderLines' ,startRow-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
trajetocampusFGAX = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

%%Vetor de velocidades
V = zeros(1,313);

%%Iterar para calcular o deslocamento do carro ponto a ponto 
for i=1:313
   if i>1
       V(i) = sqrt((trajetocampusFGAX(i)-trajetocampusFGAX(i-1))^2+(trajetocampusFGAZ(i)-trajetocampusFGAZ(i-1))^2+(trajetocampusFGAY(i)-trajetocampusFGAY(i-1))^2);
   else
       V(i) = 0;
   end
end

%%Constantes
 M = 600;
 g = 9.8;
 Crr1 = 0.127;
 Crr2 = 0.000116;
 Rho = 1.1241;
 Cd = 1;
 Af = 2.5;
 dV = diff(V);
 
 x = zeros (1,312);
 y = zeros (1,312);
 F = zeros (1,312);
 Fa = zeros (1,312);
 Fi = zeros (1,312);
 Fr = zeros (1,312);
 P = zeros (1,312);
 Pi = zeros (1,312);
 Pr = zeros (1,312);
 
 %%Calculo das forcas no veiculo
 for t=1:312
    x(t)=t;
    b = V(t);
    Fa(t) = 0.5*Cd*Rho*Af*b^2;
    Fr(t) = (Crr1+ (Crr2*b))*M;
    Fi(t) = M*dV(t);
    F(t) = Fa(t) + Fr(t) + Fi(t);
 end
 
 Potmed = 0;
 
 %%Calculo da potencia
 for u=1:312
    y(t)=u;
    c = V(u);
    Pa(u) = Fa(u)*c;
    Pr(u) = Fr(u)*c;
    Pi(u) = Fi(u)*c;
    P(u) = Pi(u) + Pr(u) + Pa(u);
    if P(u) < 0
        P(u) = 0;
    end
    Potmed = Potmed + abs(P(u));
 end

 Potmed = Potmed/312;
 
figure(1);
plot(trajetocampusFGAt, V,'b');
grid on
grid minor
title('Perfil de velocidade');
xlabel('tempo (s)');
ylabel('Velocidade (m/s)');


figure(2);
plot(x,P,'b');
yline(Potmed,'r');
grid on
grid minor
title('Potência (Watts)');
xlabel('Tempo (s)');
ylabel('Watts (W)');
dim = [.3 .5 .3 .3];
str = 'Potência média = 2329,10 W';
annotation('textbox',dim,'String',str,'FitBoxToText','on');



